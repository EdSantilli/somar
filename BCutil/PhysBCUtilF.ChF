c*******************************************************************************
c  SOMAR - Stratified Ocean Model with Adaptive Refinement
c  Developed by Ed Santilli & Alberto Scotti
 *  Copyright (C) 2014 University of North Carolina at Chapel Hill
c
c  This library is free software; you can redistribute it and/or
c  modify it under the terms of the GNU Lesser General Public
c  License as published by the Free Software Foundation; either
c  version 2.1 of the License, or (at your option) any later version.
c
c  This library is distributed in the hope that it will be useful,
c  but WITHOUT ANY WARRANTY; without even the implied warranty of
c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
c  Lesser General Public License for more details.
c
c  You should have received a copy of the GNU Lesser General Public
c  License along with this library; if not, write to the Free Software
c  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
c  USA
c
c  For up-to-date contact information, please visit the repository homepage,
c  https://github.com/somarhub.
c*******************************************************************************
#include "CONSTANTS.H"
#include "LevelGeometry.H"


c ----------------------------------------------------------------
c Computes the square Brunt-Väisälä frequency at cell-centers.
c
c Nsq      <=  CC destination holder.
c buoyancy  => CC reduced gravity.
c dXidz     => CC Jacobian elements.
c dXi       => grid spacing in curvilinear coordinates.
c destBox   => CC computation region
c ----------------------------------------------------------------
      subroutine COMPUTE_CCNSQ(
     &      CHF_FRA1[Nsq],
     &      CHF_CONST_FRA1[buoyancy],
     &      CHF_CONST_FRA[dXidz],
     &      CHF_CONST_REALVECT[dXi],
     &      CHF_BOX[destBox])

      integer CHF_AUTODECL[i]
      integer CHF_AUTODECL[ii]
      REAL_T scale

      ! Initialize with xi^0 derivative term.
      CHF_AUTOID[ii;0]
      scale = half / dXi(0)
      CHF_AUTOMULTIDO[destBox;i]
        Nsq(CHF_AUTOIX[i]) = -dXidz(CHF_AUTOIX[i],0)
     &                     * scale * (buoyancy(CHF_OFFSETIX[i;+ii]) - buoyancy(CHF_OFFSETIX[i;-ii]))
      CHF_ENDDO

      ! Add xi^1 derivative term
      CHF_AUTOID[ii;1]
      scale = half / dXi(1)
      CHF_AUTOMULTIDO[destBox;i]
        Nsq(CHF_AUTOIX[i]) = Nsq(CHF_AUTOIX[i])
     &                     - dXidz(CHF_AUTOIX[i],1)
     &                     * scale * (buoyancy(CHF_OFFSETIX[i;+ii]) - buoyancy(CHF_OFFSETIX[i;-ii]))
      CHF_ENDDO

#if CH_SPACEDIM > 2
      ! Add xi^2 derivative term
      CHF_AUTOID[ii;2]
      scale = half / dXi(2)
      CHF_AUTOMULTIDO[destBox;i]
        Nsq(CHF_AUTOIX[i]) = Nsq(CHF_AUTOIX[i])
     &                     - dXidz(CHF_AUTOIX[i],2)
     &                     * scale * (buoyancy(CHF_OFFSETIX[i;+ii]) - buoyancy(CHF_OFFSETIX[i;-ii]))
      CHF_ENDDO
#endif

      return
      end


