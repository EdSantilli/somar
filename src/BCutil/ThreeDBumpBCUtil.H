/*******************************************************************************
 *  SOMAR - Stratified Ocean Model with Adaptive Refinement
 *  Developed by Ed Santilli & Alberto Scotti
 *  Copyright (C) 2014 University of North Carolina at Chapel Hill
 *
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2.1 of the License, or (at your option) any later version.
 *
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
 *  USA
 *
 *  For up-to-date contact information, please visit the repository homepage,
 *  https://github.com/somarhub.
 ******************************************************************************/
#ifndef __ThreeDBumpBCUtil_H__INCLUDED__
#define __ThreeDBumpBCUtil_H__INCLUDED__

#include "PhysBCUtil.H"


// -----------------------------------------------------------------------------
// IBCs for the internal wave beam generated by tidal forcing.
// -----------------------------------------------------------------------------
class ThreeDBumpBCUtil: public PhysBCUtil
{
public:

    // Default constructor
    ThreeDBumpBCUtil ();

    // Default destructor
    virtual ~ThreeDBumpBCUtil ();

    // Factory
    virtual PhysBCUtil* newPhysBCUtil () const;

    // This is in case the BC's have an effect on the timestep.
    // Pass in currently computed dt, along with the cfl and dx. If the effect
    // of the BCs requires a decreased timestep, then the newly reduced timestep
    // is returned.
    virtual void computeBoundaryDt (Real&                a_dt,
                                    const Real           a_cfl,
                                    const LevelGeometry& a_levGeo) const;

    // Fills a FAB with the initial scalars
    virtual void setScalarIC (FArrayBox&           a_scalarFAB,
                              const int            a_scalarComp,
                              const LevelGeometry& a_levGeo,
                              const DataIndex&     a_di) const;

    // Fills a FAB with the background scalar
    virtual void setBackgroundScalar (FArrayBox&           a_scalarFAB,
                                      const int            a_scalarComp,
                                      const LevelGeometry& a_levGeo,
                                      const DataIndex&     a_di,
                                      const Real           a_time) const;

    // Default is a linear increase as a_ratio approaches unity.
    inline virtual Real spongeLayerRamp (Real a_ratio) const;

    // Sets the Cartesian-based target velocity for the sponge layer.
    // By default, this function throws an error.
    virtual void fillVelSpongeLayerTarget (FArrayBox&           a_target,
                                           const int            a_velComp,
                                           const int            a_spongeDir,
                                           const Side::LoHiSide a_spongeSide,
                                           const LevelGeometry& a_levGeo,
                                           const DataIndex&     a_di,
                                           const Real           a_time);

protected:
    // Sets physical BCs on velocities
    virtual BCMethodHolder basicVelFuncBC (int a_veldir, bool a_isViscous) const;

    // Sets CC bdry slopes (undivided differences) in the tracing scheme.
    virtual Tuple<BCMethodHolder,SpaceDim> velSlopeBC (int a_velComp, bool a_isViscous) const;

    // Sets ghosts needed to calculate the diffusive term nu.L[scalar]
    virtual BCMethodHolder diffusiveSourceFuncBC () const;

    /// used in scalar TGA solves
    virtual BCMethodHolder diffusiveSolveFuncBC () const;

    // Static members
    static bool s_tidalParamsRead;
    static Real s_tidalOmega;
    static Real s_tidalU0;
    static Real s_H;
    static bool s_isNoSlip;  
    // This not only sets BC values, but also determines the background
    // stratification. WARNING: Since this is a static member, do not rely on static
    // data set by the constructor such as tidal params.
    static void bscalBCValues (Real*           a_pos,
                               int*            a_dir,
                               Side::LoHiSide* a_side,
                               Real*           a_value,
                               Real            a_derivScale,
                               Real            a_time);


};



// -----------------------------------------------------------------------------
// Sets the sponge ramp profile. This is a mapping [0,1] -> [0,1].
// -----------------------------------------------------------------------------
inline Real ThreeDBumpBCUtil::spongeLayerRamp (Real a_ratio) const
{
    // Linear profile
    // return a_ratio;

    // Quadratic profile
    return a_ratio*a_ratio;

    // Exponential profile
    // const Real c0 = 50.0;
    // return (exp(log(c0) * a_ratio) - 1.0) / (c0 - 1.0);
}


// -----------------------------------------------------------------------------
// Sets nhat.Grad[b'] = -nhat.Grad[bbar].
// Only sets BCs on bottom boundary.
// TODO: Extend this to work at any boundary.
// -----------------------------------------------------------------------------
class ThreeDBeamGeneratorNeumBCGhostClass: public BCGhostClass
{
public:
    ThreeDBeamGeneratorNeumBCGhostClass (const PhysBCUtil* a_physBCPtr)
    : m_physBCPtr(a_physBCPtr)
    {
        m_bcDescriptor.set(BCType::Neum);
    }

    virtual ~ThreeDBeamGeneratorNeumBCGhostClass ()
    {;}

    virtual void operator() (FArrayBox&           a_state,
                             const FArrayBox*     a_extrapPtr,
                             const Box&           a_valid,
                             const ProblemDomain& a_domain,
                             const RealVect&      a_dx,
                             const DataIndex&     a_index,
                             const FluxBox*       a_JgupPtr,
                             bool                 a_homogeneous,
                             Real                 a_time = BOGUS_TIME,
                             const Interval&      a_interval = Interval()) const;

protected:
    const PhysBCUtil* m_physBCPtr;

private:
    // Copy constructor and assignment operator are disallowed.
  ThreeDBeamGeneratorNeumBCGhostClass(const ThreeDBeamGeneratorNeumBCGhostClass&);
    ThreeDBeamGeneratorNeumBCGhostClass& operator=(const ThreeDBeamGeneratorNeumBCGhostClass&);


};



#endif //!__ThreeDBumpBCUtil_H__INCLUDED__
