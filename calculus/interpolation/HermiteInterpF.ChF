c*******************************************************************************
c  SOMAR - Stratified Ocean Model with Adaptive Refinement
c  Developed by Ed Santilli & Alberto Scotti
c  Copyright (C) 2014 University of North Carolina at Chapel Hill
c
c  This library is free software; you can redistribute it and/or
c  modify it under the terms of the GNU Lesser General Public
c  License as published by the Free Software Foundation; either
c  version 2.1 of the License, or (at your option) any later version.
c
c  This library is distributed in the hope that it will be useful,
c  but WITHOUT ANY WARRANTY; without even the implied warranty of
c  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
c  Lesser General Public License for more details.
c
c  You should have received a copy of the GNU Lesser General Public
c  License along with this library; if not, write to the Free Software
c  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
c  USA
c
c  For up-to-date contact information, please visit the repository homepage,
c  https://github.com/somarhub.
c*******************************************************************************



c ----------------------------------------------------------------
c The nodes will be labeled as A, B, C, and D in this order:   C---D
c                                                              |   |
c                                                              A---B
c fu = df/du
c fv = df/dv
c u = (x - x_{i}) / {x{i+1} - x_{i}}
c v = (y - y_{j}) / {y{j+1} - y_{j}}
c
c h1(u) = 1 - 3u^2 + 2u^3
c h2(u) = 3u^2 - 2u^3
c h3(u) = u - 2u^2 + u^3
c h4(u) = -u^2 + u^3
c
c Note that      : h1   h2   h3'  h4'
c            u=0 : 1    0    1    0
c            u=1 : 0    1    0    1
c and all other values, derivs at these points are zero.
c
c f_{ABCD}(u,v) = f_{AB}(u)*h1(v) + f_{CD}(u)*h2(v)
c               + f_{AC}(v)*h1(u) + f_{BD}(v)*h2(u)
c               - f_{A}*h1(u)*h1(v) - f_{B}*h2(u)*h1(v)
c               - f_{C}*h1(u)*h2(v) - f_{D}*h2(u)*h2(v)
c where f_{AB}(u) = f_{A}*h1(u) + f_{B}*h2(u)
c                 + f'_{A}(u)*h3(u) + f'_{B}(u)*h4(u),
c ----------------------------------------------------------------
      subroutine HermiteInterp2DF (
     &      CHF_FRA[fInterp],
     &      CHF_CONST_FRA1[xInterp],
     &      CHF_CONST_FRA1[yInterp],
     &      CHF_BOX[interpBox],
     &      CHF_CONST_INT[xdir],
     &      CHF_CONST_INT[ydir],
     &      CHF_CONST_VR[x],
     &      CHF_CONST_VR[y],
     &      CHF_CONST_FRA[f],
     &      CHF_CONST_FRA[dfdx],
     &      CHF_CONST_FRA[dfdy])

      integer fn, fncomp
      integer CHF_AUTODECL[i]
      integer ilo, ihi, jlo, jhi, i, j
      REAL_T xi, xlo, xhi        ! x at the interp point, A/C, and B/D
      REAL_T yj, ylo, yhi        ! y at the interp point, A/B, and C/D
      REAL_T u, v                ! x and y, each normalized to [0,1] within the interp cell
      REAL_T fA, fB, fC, fD      ! Function values at nodes
      REAL_T fxA, fxB, fxC, fxD  ! Function derivatives at nodes
      REAL_T fyA, fyB, fyC, fyD  ! Function derivatives at nodes
      REAL_T fAB, fCD, fAC, fBD  ! Function interpolations along edges
      REAL_T h1u, h2u, h3u, h4u  ! Polynomial values along x-dir
      REAL_T h1v, h2v, h3v, h4v  ! Polynomial values along y-dir

      fncomp = CHF_NCOMP[fInterp]

        do fn = 0, fncomp-1
          CHF_AUTOMULTIDO[interpBox; i]

            ! Search for xi -- This is a VERY naive implementation.
            xi = xInterp(CHF_AUTOIX[i])
            ilo = 0     ! Must equal CHF_LBOUND[f;xdir]
            ihi = ixhi0 ! Must equal CHF_UBOUND[f;xdir]

10          if (ihi-ilo .gt. 1) then
              i = (ihi+ilo)/2
              if (x(i) .gt. xi) then
                ihi = i
              else
                ilo = i
              endif
              goto 10
            endif

            ! Search for yi -- This is a VERY naive implementation.
            yj = yInterp(CHF_AUTOIX[i])
            jlo = 0     ! Must equal CHF_LBOUND[f;ydir]
            jhi = iyhi0 ! Must equal CHF_UBOUND[f;ydir]

11          if (jhi-jlo .gt. 1) then
              j = (jhi+jlo)/2
              if (y(j) .gt. yj) then
                jhi = j
              else
                jlo = j
              endif
              goto 11
            endif

            ! Gather needed values
            xlo = x(ilo)
            xhi = x(ihi)

            ylo = y(jlo)
            yhi = y(jhi)

            if ((xdir .eq. 0) .and. (ydir .eq. 1)) then
              fA = f(CHF_DDECL[ilo;jlo;i2],fn)
              fB = f(CHF_DDECL[ihi;jlo;i2],fn)
              fC = f(CHF_DDECL[ilo;jhi;i2],fn)
              fD = f(CHF_DDECL[ihi;jhi;i2],fn)

              fxA = dfdx(CHF_DDECL[ilo;jlo;i2],fn)
              fxB = dfdx(CHF_DDECL[ihi;jlo;i2],fn)
              fxC = dfdx(CHF_DDECL[ilo;jhi;i2],fn)
              fxD = dfdx(CHF_DDECL[ihi;jhi;i2],fn)

              fyA = dfdy(CHF_DDECL[ilo;jlo;i2],fn)
              fyB = dfdy(CHF_DDECL[ihi;jlo;i2],fn)
              fyC = dfdy(CHF_DDECL[ilo;jhi;i2],fn)
              fyD = dfdy(CHF_DDECL[ihi;jhi;i2],fn)
            else
              if ((xdir .eq. 1) .and. (ydir .eq. 2)) then
                fA = f(CHF_DDECL[i0;ilo;jlo],fn)
                fB = f(CHF_DDECL[i0;ihi;jlo],fn)
                fC = f(CHF_DDECL[i0;ilo;jhi],fn)
                fD = f(CHF_DDECL[i0;ihi;jhi],fn)

                fxA = dfdx(CHF_DDECL[i0;ilo;jlo],fn)
                fxB = dfdx(CHF_DDECL[i0;ihi;jlo],fn)
                fxC = dfdx(CHF_DDECL[i0;ilo;jhi],fn)
                fxD = dfdx(CHF_DDECL[i0;ihi;jhi],fn)

                fyA = dfdy(CHF_DDECL[i0;ilo;jlo],fn)
                fyB = dfdy(CHF_DDECL[i0;ihi;jlo],fn)
                fyC = dfdy(CHF_DDECL[i0;ilo;jhi],fn)
                fyD = dfdy(CHF_DDECL[i0;ihi;jhi],fn)
              else
                if ((xdir .eq. 2) .and. (ydir .eq. 0)) then
                  fA = f(CHF_DDECL[jlo;i1;ilo],fn)
                  fB = f(CHF_DDECL[jlo;i1;ihi],fn)
                  fC = f(CHF_DDECL[jhi;i1;ilo],fn)
                  fD = f(CHF_DDECL[jhi;i1;ihi],fn)

                  fxA = dfdx(CHF_DDECL[jlo;i1;ilo],fn)
                  fxB = dfdx(CHF_DDECL[jlo;i1;ihi],fn)
                  fxC = dfdx(CHF_DDECL[jhi;i1;ilo],fn)
                  fxD = dfdx(CHF_DDECL[jhi;i1;ihi],fn)

                  fyA = dfdy(CHF_DDECL[jlo;i1;ilo],fn)
                  fyB = dfdy(CHF_DDECL[jlo;i1;ihi],fn)
                  fyC = dfdy(CHF_DDECL[jhi;i1;ilo],fn)
                  fyD = dfdy(CHF_DDECL[jhi;i1;ihi],fn)
                else
                  call MAYDAYERROR()
                endif
              endif
            endif

            ! Compute interpolating polynomials
            if (xlo .eq. xhi) then
                u = xi - xlo
            else
                u = (xi - xlo) / (xhi - xlo)
            endif
            CH_assert((xhi.ge.xlo))
            CH_assert(((zero.le.u).or.(u.le.one)))

            h4u = (u-1.0)*u*u
            h3u = ((u-2.0)*u+1.0)*u
            h2u = (3.0 - 2.0*u)*u*u
            h1u = 1.0 - h2u

            if (ylo .eq. yhi) then
                v = yj - ylo
            else
                v = (yj - ylo) / (yhi - ylo)
            endif
            CH_assert((yhi.ge.ylo))
            CH_assert(((zero.le.v).or.(v.le.one)))

            h4v = (v-1.0)*v*v
            h3v = ((v-2.0)*v+1.0)*v
            h2v = (3.0 - 2.0*v)*v*v
            h1v = 1.0 - h2v

            ! Compute edge interpolations
            fAB = fA*h1u + fB*h2u + fxA*h3u + fxB*h4u
            fCD = fC*h1u + fD*h2u + fxC*h3u + fxD*h4u
            fAC = fA*h1v + fC*h2v + fyA*h3v + fyC*h4v
            fBD = fB*h1v + fD*h2v + fyB*h3v + fyD*h4v

            ! Compute simplified Hermite interpolant
            fInterp(CHF_AUTOIX[i],fn)
     &           = fAB*h1v + fCD*h2v + fAC*h1u + fBD*h2u
     &           - fA*h1u*h1v - fB*h2u*h1v - fC*h1u*h2v - fD*h2u*h2v
          CHF_ENDDO
        enddo !fn

      return
      end
