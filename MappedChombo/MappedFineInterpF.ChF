! C      _______              __
! C     / ___/ /  ___  __ _  / /  ___
! C    / /__/ _ \/ _ \/  V \/ _ \/ _ \
! C    \___/_//_/\___/_/_/_/_.__/\___/
! C    Please refer to Copyright.txt, in Chombo's root directory.

#include "CONSTANTS.H"

c ------------------------------------------------------------------------------
c piecewise constant interpolation
c ------------------------------------------------------------------------------
      subroutine unmappedinterpconstant(
     &     CHF_FRA[fine],
     &     CHF_CONST_FRA[coarse],
     &     CHF_BOX[coarseBox],
     &     CHF_CONST_INTVECT[ref_ratio],
     &     CHF_BOX[bref])

      integer var
      integer CHF_AUTODECL[ic]
      integer CHF_AUTODECL[if]
      integer CHF_AUTODECL[ii]

      ! compute on the refined box of each coarse point
      do var = 0, CHF_NCOMP[coarse] - 1
         CHF_AUTOMULTIDO[coarseBox;ic]
            CHF_AUTOMULTIDO[bref; ii]
              CHF_DTERM[
              if0 = ic0*ref_ratio(0) + ii0;
              if1 = ic1*ref_ratio(1) + ii1;
              if2 = ic2*ref_ratio(2) + ii2]

              fine(CHF_AUTOIX[if],var) = coarse(CHF_AUTOIX[ic],var)
            CHF_ENDDO
         CHF_ENDDO
      end do

      return
      end


c ------------------------------------------------------------------------------
c piecewise bi-(tri-)linear interpolation to "fine" assuming that
c piecewise constant interpolation has already been done
c ------------------------------------------------------------------------------
      subroutine unmappedinterplinear(
     &     CHF_FRA[fine],
     &     CHF_CONST_FRA[slope],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_INTVECT[ref_ratio],
     &     CHF_BOX[bref])

      integer CHF_AUTODECL[ic]
      integer CHF_AUTODECL[if]
      integer CHF_AUTODECL[ii]
      integer var, id
      REAL_T dxf

      do var = 0, CHF_NCOMP[fine] - 1
        CHF_AUTOMULTIDO[b;ic]
          CHF_AUTOMULTIDO[bref;ii]

            CHF_DTERM[
            if0 = ic0*ref_ratio(0) + ii0;
            if1 = ic1*ref_ratio(1) + ii1;
            if2 = ic2*ref_ratio(2) + ii2]

            CHF_DTERM[
            if (dir .eq. 0) then
              id = ii0;
            else if (dir .eq. 1) then
              id = ii1;
            else if (dir .eq. 2) then
              id = ii2]
            endif

            dxf = -half + ( (id+half) / ref_ratio(dir) );

            fine(CHF_AUTOIX[if],var) =
     &          fine(CHF_AUTOIX[if],var) +
     &          dxf * slope(CHF_AUTOIX[ic], var)
          CHF_ENDDO
        CHF_ENDDO
      enddo

      return
      end


c ------------------------------------------------------------------------------
c piecewise constant interpolation -- this only fills in
c data on faces which overlie coarse faces.  Intermediate
c faces will be filled in later.  This is actually exactly
c the same as interp_constant, i think!
c
c In this case, b should either be the lo or high
c ------------------------------------------------------------------------------
      subroutine UnmappedInterpFaceConstant(
     &     CHF_FRA[fine],
     &     CHF_CONST_FRA[coarse],
     &     CHF_BOX[b],
     &     CHF_CONST_INTVECT[ref_ratio],
     &     CHF_BOX[bref],
     &     CHF_CONST_INT[dir]
     &     )

      integer var
      integer CHF_AUTODECL[ic]
      integer CHF_AUTODECL[ifine]
      integer CHF_AUTODECL[ii]


c compute on the refined face of each coarse face
      do var = 0, CHF_NCOMP[coarse] - 1
         CHF_AUTOMULTIDO[b; ic]
            CHF_AUTOMULTIDO[bref; ii]
            CHF_DTERM[
               ifine0 = ic0*ref_ratio(0) + ii0;
               ifine1 = ic1*ref_ratio(1) + ii1;
               ifine2 = ic2*ref_ratio(2) + ii2]

               fine(CHF_AUTOIX[ifine],var) = coarse(CHF_AUTOIX[ic],var)
            CHF_ENDDO
         CHF_ENDDO
      end do

      return
      end


c ------------------------------------------------------------------------------
c piecewise bi-(tri-)linear interpolation to "fine" assuming that
c piecewise constant interpolation has already been done
c this is probably also the same as the basic interp_linear subroutine
c ------------------------------------------------------------------------------
      subroutine UnmappedInterpLinearFace (
     &     CHF_FRA[fine],
     &     CHF_CONST_FRA[slope],
     &     CHF_BOX[b],
     &     CHF_CONST_INT[dir],
     &     CHF_CONST_INTVECT[ref_ratio],
     &     CHF_BOX[brefface]
     &     )

      integer CHF_AUTODECL[ ic ]
      integer CHF_AUTODECL[ ifine ]
      integer CHF_AUTODECL[ ii ]
      integer var, id

      REAL_T dxf
c this is a box that will go from (0,0,0) to (ref_ratio-1)*(1,1,1)

c compute on the refined edges of each coarse edge
      do var = 0, CHF_NCOMP[fine] - 1
         CHF_AUTOMULTIDO[ b; ic ]

              CHF_AUTOMULTIDO[ brefface; ii ]

              CHF_DTERM[
                  ifine0 = ic0*ref_ratio(0) + ii0;
                  ifine1 = ic1*ref_ratio(1) + ii1;
                  ifine2 = ic2*ref_ratio(2) + ii2]


              CHF_DTERM[
                  if (dir .eq. 0) then
                      id = ii0;
                  else if (dir .eq. 1) then
                      id = ii1;
                  else if (dir .eq. 2) then
                      id = ii2]
                  endif

              dxf = -half + ( (id+half) / ref_ratio(dir) )
              fine(CHF_AUTOIX[ifine],var) =
     &                 fine(CHF_AUTOIX[ifine],var) +
     &                 dxf * slope(CHF_AUTOIX[ic], var)
              CHF_ENDDO
          CHF_ENDDO
      end do

      return
      end


c ------------------------------------------------------------------------------
c  this subroutine will do linear interpolation in the normal
c  direction for interior faces (faces which do not overlie a
c  coarse face).  assumes that "exterior" face interpolation
c  has already been done.
c ------------------------------------------------------------------------------
      subroutine UnmappedInterpLinearInteriorFace(
     &    CHF_FRA[fine],
     &    CHF_BOX[bcoarse],
     &    CHF_CONST_INTVECT[ref_ratio],
     &    CHF_CONST_INT[facedir],
     &    CHF_BOX[interiorrefbox]
     &    )

      integer CHF_AUTODECL[ic]
      integer CHF_AUTODECL[ifine]
      integer CHF_AUTODECL[ii]
      integer CHF_AUTODECL[iloface]
      integer CHF_AUTODECL[ihiface]
      integer var, id

      REAL_T dxf, diff
      REAL_T loval, hival

      do var=0, CHF_NCOMP[fine] -1
         CHF_AUTOMULTIDO[bcoarse; ic]
            CHF_AUTOMULTIDO[interiorrefbox; ii]

            CHF_DTERM[
              ifine0 = ic0*ref_ratio(0) + ii0;
              ifine1 = ic1*ref_ratio(1) + ii1;
              ifine2 = ic2*ref_ratio(2) + ii2]


c             this will be the coordinates of the low "exterior" face
              CHF_DTERM[
              iloface0 = ic0*ref_ratio(0) + (1-CHF_ID(0,facedir))*ii0;
              iloface1 = ic1*ref_ratio(1) + (1-CHF_ID(1,facedir))*ii1;
              iloface2 = ic2*ref_ratio(2) + (1-CHF_ID(2,facedir))*ii2]


c             this will be the coordinates of the hi "exterior" face
              CHF_DTERM[
              ihiface0 = iloface0 + ref_ratio(0)*CHF_ID(0,facedir);
              ihiface1 = iloface1 + ref_ratio(1)*CHF_ID(1,facedir);
              ihiface2 = iloface2 + ref_ratio(2)*CHF_ID(2,facedir)]

              CHF_DTERM[
              if (facedir .eq. 0) then
                 id = ii0;
              else if (facedir .eq. 1) then
                 id = ii1;
              else if (facedir .eq. 2) then
                 id = ii2]
              endif

              dxf = dble(id)/dble(ref_ratio(facedir))
              diff = fine(CHF_AUTOIX[ihiface],var)
     &             - fine(CHF_AUTOIX[iloface],var)

              fine(CHF_AUTOIX[ifine],var) = fine(CHF_AUTOIX[iloface],var)
     &                                    + dxf * diff

            CHF_ENDDO
          CHF_ENDDO

       enddo

       return
       end


c ------------------------------------------------------------------------------
c multidimensional limiting, same as interp_limit except that we
c don't even touch slopes in normal direction (just along faces)
c
c Also need to make sure that all faces are w/in physical domain
c
c bn is a box of the neighbors on this face
c ------------------------------------------------------------------------------
      subroutine UnmappedInterpLimitFace (
     &     CHF_FRA [ islope ],
     &     CHF_FRA [ jslope ],
     &     CHF_FRA [ kslope ],
     &     CHF_CONST_FRA [ state ],
     &     CHF_BOX [ b ],
     &     CHF_BOX [ bn ],
     &     CHF_BOX [validBox],
     &     CHF_CONST_INT[normaldir]
     &     )

      integer CHF_AUTODECL [ i ], var
      integer CHF_AUTODECL [ ii ]
      integer CHF_AUTODECL [ in ]
      REAL_T statemax, statemin, deltasum, etamax, etamin, eta
      REAL_T tempone, tempzero

      tempone = one
      tempzero = zero


      do var = 0, CHF_NCOMP[ islope ] - 1
         CHF_AUTOMULTIDO [ b; i]
             statemax = state ( CHF_AUTOIX[i], var )
             statemin = state ( CHF_AUTOIX[i], var )

             CHF_AUTOMULTIDO [ bn; ii]

             CHF_DTERM[
                 in0 = i0 + ii0;
                 in1 = i1 + ii1;
                 in2 = i2 + ii2]

                 if (
                 CHF_DTERM[
     &                in0 .ge. CHF_LBOUND[ validBox; 0 ] .and.
     &                in0 .le. CHF_UBOUND[ validBox; 0 ] ;
     &                .and.
     &                in1 .ge. CHF_LBOUND[ validBox; 1 ] .and.
     &                in1 .le. CHF_UBOUND[ validBox; 1 ] ;
     &                .and.
     &                in2 .ge. CHF_LBOUND[ validBox; 2 ] .and.
     &                in2 .le. CHF_UBOUND[ validBox; 2 ] ]
     &                )
     &        then
                    statemax = max ( statemax, state(CHF_AUTOIX[in],var))
                    statemin = min ( statemin, state(CHF_AUTOIX[in],var))
                 endif
             CHF_ENDDO

c ::: note that we filter out the slopes in the normal direction
             deltasum = half * (
                CHF_DTERM[
     &            (1-CHF_ID(normaldir,0))*abs(islope(CHF_AUTOIX[i],var));
     &            +
     &            (1-CHF_ID(normaldir,1))*abs(jslope(CHF_AUTOIX[i],var));
     &            +
     &            (1-CHF_ID(normaldir,2))*abs(kslope(CHF_AUTOIX[i],var))]
     &            )
             if ( deltasum .gt. zero ) then
                etamax = ( statemax - state ( CHF_AUTOIX[i], var ) )
     &               / deltasum
                etamin = ( state ( CHF_AUTOIX[i], var ) - statemin )
     &               / deltasum
                eta = max ( min ( etamin, etamax, tempone ), tempzero )

                CHF_DTERM[
                islope ( CHF_AUTOIX[i], var ) =
     &               eta * islope ( CHF_AUTOIX[i], var ) ;
                jslope ( CHF_AUTOIX[i], var ) =
     &               eta * jslope ( CHF_AUTOIX[i], var ) ;
                kslope ( CHF_AUTOIX[i], var ) =
     &               eta * kslope ( CHF_AUTOIX[i], var ) ]
             end if
         CHF_ENDDO
      end do

      return
      end

